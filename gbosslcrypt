#! /bin/sh
# Encrypt (-e) or decrypt (-d) stdin to stdout. The only argument: The pathame
# of a file containing the password in current locale encoding in the first
# line.
#
# This script always uses /tmp (or the directory specified with the -t option)
# to store temporary working files containing sensitive data (mlock-like
# functionality is not available in shell scripts). $TMPDIR is ignored. It is
# therefore mandatory that the temporary directory is either a RAM disk or
# resides on a securely encrypted disk. Likewise, if the system has been
# configured to use swap space, this swap space should be encrypted as well in
# order to avoid leaking sensitive data there.
#
# Data encrypted by this script will be binary output. The recommended file
# extension is ".gbo". It text-based output is required, conversion into
# base-64 or basE91-formats is recommended, and the file extensions could be
# something like "_gbo.b64" and "_gbo.b91", respecively.
#
# The script will normally encrypt using a salt taken from /dev/urandom. But
# if option "-S <saltfile>" is given, the salt will be taken from that file.
# When specifying the same option when decrypting, the salt will be saved to
# <saltfile> which must not exist yet.
#
# gbosslcrypt version 2023.303
# Copyright (c) 2015-2023 Guenther Brunthaler. All rights reserved.
# 
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

set -e
saltbits=512
pbkdf=gbkdf
# Cipher specs: "#" followed by block sizes in bits, "$" by key size in bits.
# Every cipher algo must not occur more than once in the specs.
encryption_order='aes-256-cbc#128$256 bf-cbc#64$128 des-ede3-cbc#64$192'
encryption_order=$encryption_order' rc4#8$128'

cleanup() {
	rc=$?
	test -n "$T" && rm -r -- "$T"
	test $rc = 0 || {
		echo "${0##*/} failed!"
		echo "See the comments at the beginning of that script for" \
			"usage instructions."
	} >& 2
}

T=
trap cleanup 0
trap 'exit $?' INT QUIT TERM HUP

script=$0
if test ! -f "$script"
then
	script=`command -v -- "$script"`
	test -f "$script"
fi
sxt=${0##*/}; sxt=${sxt#${sxt%.*}}
pbkdf=`dirname -- "$script"`/$pbkdf$sxt
test -f "$pbkdf"

mode=
unset TMPDIR
passthrough_flags=
shell_cmd=sh
xtern_salt=
while getopts S:det:NAs: OPT
do
	case $OPT in
		e) mode=encrypt;;
		d) mode=decrypt;;
		t) TMPDIR=$OPTARG;;
		s) shell_cmd=$OPTARG;; # May include arguments!
		S) test "$OPTARG"; xtern_salt=$OPTARG;;
		[AN])
			passthrough_flags=$passthrough_flags`:
				`${passthrough_flags:+ }-$OPT
			;;
		*) false
	esac
done
shift `expr $OPTIND - 1 || :`
test -n "$mode"
test $# = 1
psw=$1
test -n "$psw"
test -f "$psw"

test -d "${TMPDIR:=/tmp}"
T=`mktemp -d -- "$TMPDIR/${0##*/}".XXXXXXXXXX`

# Get salt.
salt=$T/salt
saltbytes=`expr $saltbits / 8`
if test $mode = encrypt
then
	if test "$xtern_salt"
	then
		test -e "$xtern_salt"
		dd if="$xtern_salt" bs=$saltbytes count=1 of="$salt" \
			2> /dev/null
	else
		dd if=/dev/urandom bs=$saltbytes count=1 of="$salt" \
			2> /dev/null
	fi
	cat "$salt"
else
	dd bs=$saltbytes count=1 of="$salt" 2> /dev/null
	if test "$xtern_salt"
	then
		test ! -e "$xtern_salt"
		test -d "`dirname -- "$xtern_salt"`"
		cat < "$salt" > "$xtern_salt"
	fi
fi

# Split $algo into $algo, $blkbits and $keybits.
parse_algo() {
	keybits=${algo##*'$'}
	algo=${algo%?"$keybits"}
	blkbits=${algo##*'#'}
	algo=${algo%?"$blkbits"}
}

set -- $encryption_order
# Generate keys.
$shell_cmd "$pbkdf" -t"$TMPDIR" $passthrough_flags "$salt" "$psw" | {
	lastbbits=8
	for algo
	do
		parse_algo
		dd count=`expr $keybits / 4` bs=1 of="$T/$algo.psw" \
			2> /dev/null
		if
			test $blkbits -gt $lastbbits \
			|| expr $lastbbits % $blkbits != 0 > /dev/null
		then
			> "$T/$algo.pad"
		fi
		lastbbits=$blkbits
	done
}

if test $mode = decrypt
then
	# Reverse argument order.
	set -- "$@" --s --e
	while :
	do
		while test "$2" != "--s"
		do
			set -- "$@" "$1"; shift
		done
		last=$1; shift
		test "$last" = "--e" && break
		while test "$1" != "--e"
		do
			set -- "$@" "$1"; shift
		done
		set -- "$last" "$@"
	done
	shift
fi

crypt() {
	algo=$1; shift
	if test -n "$1"
	then
		crypt "$algo" | crypt "$@"
	else
		parse_algo
		set -- openssl enc -$algo \
			-nosalt -pass "file:$T/$algo.psw" -md rmd160
		test $mode = decrypt && set -- "$@" -d
		test -e "$T/$algo.pad" || set -- "$@" -nopad
		"$@" 2> "$T/algo.log" || {
			cat < "$T/algo.log" >& 2
			false || exit
		}
	fi
}

crypt "$@"
